class Solution:
    def max_rect(self, heights):
        stk = [] # height, width
        res = 0
        
        for h_idx, h in enumerate(heights):
            if stk == [] or h >= stk[-1][0]: # if increasing
                for idx, s in enumerate(stk):
                    stk[idx][1] += 1
                if h != 0:
                    stk.append([h,1])
            else:
                
                while stk != [] and stk[-1][0] > h:
                    h_l, w = stk.pop()
                    res = max(res, w * h_l)
                for idx, s in enumerate(stk):
                    stk[idx][1] += 1
                
                width_for_new_height = 1
                # print(heights[idx+1:0:-1], 123)
                # print(1111111111)
                for prev_h_idx in range(h_idx, 0, -1):
                    # print(prev_h_idx)
                    prev_h = heights[prev_h_idx-1]
                    # print(prev_h, h, h_idx)
                    if prev_h > h:
                        width_for_new_height += 1
                        # print(width_for_new_height)
                    else:
                        break
                # print(1111111111)
                stk.append([h, width_for_new_height])
            # from pprint import pprint
            # pprint(stk)
        while stk != []:
            w, h = stk.pop()
            res = max(res, w * h)
        # print(heights, res)
        
        return res
                    
                
    def maximalRectangle(self, matrix):
        if matrix == []:
            return 0
        
        size = len(matrix[0])
        res = 0
        height = [0] * size
        
        for i, row in enumerate(matrix):
            for j, col in enumerate(row):
                if matrix[i][j] == "1":
                    height[j] += 1
                else:
                    height[j] = 0
            res = max(res, self.max_rect(height))
        return res
        
s = Solution()
print(s.max_rect([3,6,5,7,4,8,1,0]))
# print(s.maximalRectangle([["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]))
# print(s.maximalRectangle([["0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0"],
                          # ["1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                          # ["1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
                          # ["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1"],
                          # ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1"],
                          # ["1","1","1","0","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1"],
                          # ["1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1"],
                          # ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0"],
                          # ["0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1"],
                          # ["1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1"],
                          # ["1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
                          # ["0","1","1","0","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
                          # ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","1","1"],
                          # ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                          # ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
                          # ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1"],
                          # ["1","1","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","1","1"],
                          # ["1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","1","1","1"]]))